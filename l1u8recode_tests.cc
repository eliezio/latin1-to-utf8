#include <gtest/gtest.h>

#include "l1u8recode.h"

static const uint8_t inLatin1Only[] = {
    0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a, 0x63, 0x6f,  //cora..o.BEGIN.co
    0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3,  //ra..o.END.cora..
    0x6f, 0x0a,                                                                                      //o.
};

static const uint8_t inMixed[] = {
    0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a, 0x63, 0x6f,  //cora..o.BEGIN.co
    0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a,  //ra..o.cora....o.
    0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a,                          //END.cora..o.
};

static uint8_t  output[4096];

TEST (L1U8Tests, latin1OnlyFullConversion) {
    static const uint8_t exptectedOutput[] = {
        0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a,  //cora....o.BEGIN.
        0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f,  //cora....o.END.co
        0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a,                                                  //ra....o.
    };
    L1U8Recode l1U8Recode = L1U8Recode();
    size_t outputLen = l1U8Recode.translate(inLatin1Only, sizeof(inLatin1Only), output);
    EXPECT_EQ(sizeof(exptectedOutput), outputLen);
    EXPECT_EQ(0, memcmp(output, exptectedOutput, outputLen));
}

TEST (L1U8Tests, latin1OnlyBeginEndDelimented) {
    static const uint8_t expectedOutput[] = {
        0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a, 0x63, 0x6f,  //cora..o.BEGIN.co
        0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f, 0x72, 0x61,  //ra....o.END.cora
        0xe7, 0xe3, 0x6f, 0x0a,                                                                          //..o.
    };
    L1U8Recode l1U8Recode = L1U8Recode("\nBEGIN", "END\n");
    size_t outputLen = l1U8Recode.translate(inLatin1Only, sizeof(inLatin1Only), output);
    EXPECT_EQ(sizeof(expectedOutput), outputLen);
    EXPECT_EQ(0, memcmp(output, expectedOutput, outputLen));
}

TEST (L1U8Tests, latin1OnlyEndDelimited) {
    static const uint8_t expectedOutput[] = {
        0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a,  //cora....o.BEGIN.
        0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f,  //cora....o.END.co
        0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a,                                                              //ra..o.
    };
    L1U8Recode l1U8Recode = L1U8Recode(nullptr, "END\n");
    size_t outputLen = l1U8Recode.translate(inLatin1Only, sizeof(inLatin1Only), output);
    EXPECT_EQ(sizeof(expectedOutput), outputLen);
    EXPECT_EQ(0, memcmp(output, expectedOutput, outputLen));
}

TEST (L1U8Tests, mixedBeginEndDelimited) {
    static const uint8_t expectedOutput[] = {
        0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x0a, 0x63, 0x6f,  //cora..o.BEGIN.co
        0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3, 0x6f, 0x0a, 0x63, 0x6f, 0x72, 0x61, 0xc3, 0xa7, 0xc3, 0xa3,  //ra....o.cora....
        0x6f, 0x0a, 0x45, 0x4e, 0x44, 0x0a, 0x63, 0x6f, 0x72, 0x61, 0xe7, 0xe3, 0x6f, 0x0a,              //o.END.cora..o.
    };
    L1U8Recode l1U8Recode = L1U8Recode("\nBEGIN", "END\n");
    size_t outputLen = l1U8Recode.translate(inMixed, sizeof(inMixed), output);
    EXPECT_EQ(sizeof(expectedOutput), outputLen);
    EXPECT_EQ(0, memcmp(output, expectedOutput, outputLen));
}

